그래프틑 객체와 객체 간의 관계만을 본다. 따라서 vertex(객체)의 구성과 연결 관계가 같으면, 같은 그래프이다.

<명시적 그래프와 암시적 그래프>
    명시: SNS 관계, 지하철 노선도 
    암시: 바둑, 8-puzzle, 부분수열의 합

<무향과 유향 그래프>
그래프는 방향이 없는 일반적인 그래프가 있고, 방향이 존재하는 그래프도 있다.

<가중치 그래프>
간선에 weight가 있는 것. 지하철 노선도에서도 거리, 시간 등이 가중치 이다.

<그래프의 용어>
인접된: 연결된! 
경로: vertex 간의 경로. <- 이 경로 중에 한 번만 더 가면 처음으로 다시 돌아올 수 있는 것은 cycle이다. 
차쉬 한 vertex에 연결된 edge의 개수.
연결 그래프: 임의의 두 정점 사이에 항상 경로가 존재하는 그래프. 한 쌍이라도 경로가 없으면 연결 그래프가 아니다.
트리: 사이클이 없는 연결 그래프.
    트리에서 항상!, # of Edge = # of vertex - 1
    트리에서는, 부모-자식 간의 관계가 존재한다.

"인접행렬"로 트리를 표현, 
    <- 5개의 노드이면, 5x5 행렬로 연결. 행렬의 요소는 0() 혹은 1
"인접리스트"로 트리를 표현, 연결되어 있는 노드들만 리스트로 가지고 있다. 
    <- vertex의 개수만큼의 길이를 가지는 list안에 각각 해당 vertex와 인접한 vertex의 리스트가 있는 것.

    인접행렬은 두 정점의 연결 관계 확인이 O(1)만에 찾을 수 있다. 
    인접리스트에서는 리스트를 순회하여야 O(V = # vertex) 연결 관계를 찾을 수 있다.

    인접행렬은 인접한 정점을 효율적으로 찾기 힘들다. 
    인접리스트는 인접한 정점을 효율적으로 찾을 수 있다.

    인접행렬은 메모리의 낭비가 심하다. 
    인접리스트는 메모리 사용량이 적다.

    

